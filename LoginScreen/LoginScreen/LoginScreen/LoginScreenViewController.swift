//
//  LoginScreenViewController.swift
//  LoginScreen
//
//  Created Z on 1/16/20.
//  Copyright © 2020 Zyma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit


enum RestorationIdentifierTextField {
    case password
    case login
    
    var string: String {
        switch self {
        case .password    : return "password"
        case .login    : return "login"
        }
    }
}

class LoginScreenViewController: UIViewController, LoginScreenViewProtocol {

	var presenter: LoginScreenPresenterProtocol?
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var containerLogoView: UIView!
    @IBOutlet weak var containerKeyboard: UIView!
    @IBOutlet weak var keyboardContainerViewHeightConstrain: NSLayoutConstraint!
    @IBOutlet weak var linkStackView: UIStackView!
    @IBOutlet weak var loginTextFild: UITextField!
    @IBOutlet weak var passwordTextFild: UITextField!
    @IBOutlet weak var logoLabel: UILabel!
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var linkButton: UIButton!

    var passwordText: String = ""
    var hightCorrectFokusKeyb: CGFloat = 0
    var keyboadHeight: CGFloat = 0
    let charHidePassword: Character = "●"
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // MARK: navbar config
        self.navigationController?.navigationBar.isTranslucent = true
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.navigationController?.navigationBar.backgroundColor = UIColor.clear
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        
        // MARK: init TextField
        loginTextFild.layer.borderColor = UIColor.red.cgColor
        passwordTextFild.layer.borderColor = UIColor.red.cgColor
        passwordTextFild.layer.borderWidth = 0
        passwordTextFild.layer.borderWidth = 0
        loginButton.isEnabled = false
        loginButton.alpha = 0.5
        registerForKeyboardNotifications()
        passwordTextFild.delegate = self
        loginTextFild.delegate = self
        passwordTextFild.restorationIdentifier = RestorationIdentifierTextField.password.string
        loginTextFild.restorationIdentifier = RestorationIdentifierTextField.login.string
    }
    
    // MARK: - finish edit TextField
    @IBAction func editingDidEndTextField(_ sender: UITextField) {
        sender.resignFirstResponder()
    }
    
    // MARK: - change TextField Login
    @IBAction func changedLoginTextField(_ sender: UITextField) {
        guard let login = sender.text else { return }
        sender.layer.borderWidth = 0
        if (presenter?.checkLogin(login: login) == false) {
            switchOffLoginButton(sender)
        }
    }
    
    // MARK: -  change textField password
    @IBAction func changedPasswordTextField(_ sender: UITextField) {
        guard let password = sender.text else { return }
        guard password.count > 0 else { return }
        guard let lastChar = password.last else { return }
        if (lastChar == charHidePassword || passwordText.count != password.count - 1) {
            passwordText.removeAll()
            sender.text = ""
        }
        else {
            passwordText.append(lastChar)
            var passwordShow = password
            passwordShow.removeLast()
            passwordShow.append(charHidePassword)
            sender.text = passwordShow
        }
        sender.layer.borderWidth = 0
        if (presenter?.checkPassword(password: passwordText) == false) {
            switchOffLoginButton(sender)
        }
        
    }
    // MARK: - click login Button
    @IBAction func clickLoginButton(_ sender: UIButton) {
        loginTextFild.resignFirstResponder()
        passwordTextFild.resignFirstResponder()
        
        presenter?.clickLogin()
    }
    
    // MARK: -  click link Button
    @IBAction func clickLinkButton(_ sender: UIButton) {
        presenter?.openLink()
    }
    
    
    // MARK: - error login or password
    func switchOffLoginButton(_ sender: UITextField) {
        DispatchQueue.main.async {
            self.loginButton.isEnabled = false
            self.loginButton.alpha = 0.5
            sender.layer.borderWidth = 3
        }
    }
    
    // MARK: - correct login and password
    func switchOnLoginButton() {
        DispatchQueue.main.async {
            self.loginButton.isEnabled = true
            self.loginButton.alpha = 1
            self.loginTextFild.layer.borderWidth = 0
            self.passwordTextFild.layer.borderWidth = 0
        }
    }

    deinit {
        removeForKeyboardNotifications()
    }
}

extension LoginScreenViewController: UITextFieldDelegate {
    
    // MARK: - correct fokus textField (before begin edit)
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        self.passwordTextFild.layer.borderWidth = 0
        self.passwordTextFild.layer.borderWidth = 0
        if (textField.restorationIdentifier == RestorationIdentifierTextField.password.string) {
            hightCorrectFokusKeyb = textField.frame.size.height
        }
        else {
            hightCorrectFokusKeyb = 0
        }
        if (keyboadHeight > 0) {
            changeKeyboardContainerViewHeightConstrain(keyboardHeight: keyboadHeight)
        }
        return true
    }
    
    // MARK: -  clouse keyboard
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if (textField.restorationIdentifier == RestorationIdentifierTextField.password.string) {
            changedPasswordTextField(textField)
        }
        else {
            changedLoginTextField(textField)
        }
        
        textField.resignFirstResponder()
        return true
    }
    
    // MARK: - notification keyboad
    func registerForKeyboardNotifications() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    func removeForKeyboardNotifications() {
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    // MARK: - open keyboard
    @objc func keyboardWillShow(_ notification: Notification) {
        guard let userinfo = notification.userInfo else {return}
        guard let keyboadSize = (userinfo[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue else { return }
        
        keyboadHeight = keyboadSize.height
        changeKeyboardContainerViewHeightConstrain(keyboardHeight: keyboadHeight)
    }
    
    // MARK: - clouse keyboard
    @objc func keyboardWillHide() {
        keyboadHeight = 0
        changeKeyboardContainerViewHeightConstrain(keyboardHeight: keyboadHeight)
    }
    
    // MARK: - change fokus textFilde
    func changeKeyboardContainerViewHeightConstrain(keyboardHeight: CGFloat) {
        DispatchQueue.main.async {
            if (keyboardHeight > 0) {
                self.keyboardContainerViewHeightConstrain.constant = keyboardHeight - self.linkStackView.frame.size.height + self.hightCorrectFokusKeyb
            }
            else {
                self.keyboardContainerViewHeightConstrain.constant = 0
            }
        }
    }
}
