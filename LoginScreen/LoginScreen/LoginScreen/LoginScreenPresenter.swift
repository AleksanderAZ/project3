//
//  LoginScreenPresenter.swift
//  LoginScreen
//
//  Created Z on 1/16/20.
//  Copyright © 2020 Zyma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class LoginScreenPresenter: LoginScreenPresenterProtocol {

    weak private var view: LoginScreenViewProtocol?
    var interactor: LoginScreenInteractorProtocol?
    private let router: LoginScreenWireframeProtocol
    
    let charHidePassword: Character = "●"
    var statusHidePassword: Bool = true
    
    init(interface: LoginScreenViewProtocol, interactor: LoginScreenInteractorProtocol?, router: LoginScreenWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func setLogin(login: String) {
        interactor?.setLogin(login: login)
        updateView()
    }
    
    func setPassword(password: String) {
        var passwordNew = password
        if (isHidePassword()) {
            let password = interactor?.getPassword() ?? ""
            passwordNew = changeHidePassword(password: password, passwordHide: passwordNew)
        }
        interactor?.setPassword(password: passwordNew)
        updateView()
    }
    
    // MARK:  finaly check passwor and login
    func updateView() {
        guard let loginStatus = interactor?.getStatusLogin()  else { return }
        guard loginStatus else { view?.switchOffPasswordTextFild(); return }
        view?.switchOnPasswordTextFild()
        guard let passwordStatus = interactor?.getStatusPassword()  else { return }
        guard passwordStatus else { view?.switchOffLoginButton() ; return }
        view?.switchOnLoginButton()
    }
    
    func isHidePassword()-> Bool {
        return statusHidePassword
    }
    
    func changeHidePassword()->String {
        statusHidePassword = !statusHidePassword
        if (isHidePassword()) {
            view?.setTittlePasswordButtonShow()
        }
        else {
            view?.setTittlePasswordButtonHide()
        }
        return getPasswordForShow()
    }
    
    func changeHidePassword(password: String, passwordHide: String)->String {
        var password = password
        guard (passwordHide.count > 0) else { return ""}
        guard (passwordHide.count >= password.count) else { return "" }
        guard (passwordHide.count > password.count) else { return password }
        guard let _ = passwordHide.lastIndex(where: {$0 != charHidePassword}) else { return "" }
        var newPassword = ""
        for char in passwordHide {
            if (char == charHidePassword) {
                newPassword.append(password.removeFirst())
            }
            else {
                newPassword.append(char)
            }
        }
        return newPassword
    }
    
    func getPasswordForShow()->String {
        guard let password = interactor?.getPassword() else { return "" }
        if (isHidePassword()) {
            return String(repeating: charHidePassword, count: password.count)
        }
        else {
            return password
        }
    }
    
    func clickLogin() {
        router.login(login: interactor?.getLogin() ?? "", password: interactor?.getPassword() ?? "")
    }
    
    func openLink() {
        router.openLink()
    }
}
