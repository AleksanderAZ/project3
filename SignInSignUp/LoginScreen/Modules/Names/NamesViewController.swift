//
//  NamesViewController.swift
//  LoginScreen
//
//  Created Z on 11/6/19.
//  Copyright Â© 2019 Zyma. All rights reserved.
//
//  Template generated by Juanpe CatalÃ¡n @JuanpeCMiOS
//

import UIKit

class NamesViewController: UIViewController, NamesViewProtocol {

	var presenter: NamesPresenterProtocol?
    let cellIdentifier = "NamesCells"
    
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var namesTable: UITableView!
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        
        let signoutButton = UIBarButtonItem(title: "Sign out.", style: .plain, target: self, action: #selector(clickSignOutButtonBar))
        let addNameButton = UIBarButtonItem(title: "Add line.", style: .done, target: self, action: #selector(clickAddButtonBar))
        self.navigationItem.rightBarButtonItems = [signoutButton, addNameButton]
       
        namesTable.delegate = self
        namesTable.dataSource = self
       
        namesTable.register(UINib(nibName: cellIdentifier, bundle: nil), forCellReuseIdentifier: cellIdentifier)
        namesTable.rowHeight = UITableView.automaticDimension
        namesTable.tableFooterView = UIView(frame: .zero)
        
        self.presenter?.requestName()
    }
    
    @objc func clickSignOutButtonBar() {
        presenter?.signOut()
    }
    
    @objc func clickAddButtonBar() {
        self.presenter?.addName(name: "New line" + String((self.presenter?.countCell(section: 1) ?? 0) + 1))
    }
    
    func update() {
        DispatchQueue.main.async {
            self.namesTable.reloadData()
            self.activityIndicator.stopAnimating()
        }
    }
}

extension NamesViewController:  UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let count = presenter?.countCell(section: section) ?? 0
        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)
        if let cell = cell as? NamesCells {
            cell.name.text = self.presenter?.getName(section: indexPath.section, index: indexPath.row)
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let name = presenter?.getName(section: indexPath.section, index: indexPath.row) else { return }
        self.presenter?.addName(name: name)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let deleteAction = UIContextualAction(style: .destructive, title: "ðŸ—‘", handler: { [weak self] (action, view, handler) in
            self?.presenter?.deleteName(section: indexPath.section, index: indexPath.row)
        })
        let config = UISwipeActionsConfiguration(actions: [deleteAction])
        return config
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        if (section == 0) {
            return "Api Name"
        }
        return "Manual Name"
    }
}
